package xyz.haroldgao.sugarisa;

import org.junit.Assert;
import org.junit.Test;
import xyz.haroldgao.sugarisa.execute.ArchitecturalState;
import xyz.haroldgao.sugarisa.execute.Register;
import xyz.haroldgao.sugarisa.execute.SugarExecutor;
import xyz.haroldgao.sugarisa.execute.instructions.MemoryWriteInstruction;
import xyz.haroldgao.sugarisa.parser.Parser;

import java.util.function.Predicate;

/**
 * Some of these tests were generated by ChatGPT (because they are tedious to write and do not require brain-cells.)
 * Methods generated using AI will be labeled as such.
 * */
public class IntegrationTest {

    @Test
    public void testSetter(){
        test("r0 = r0;", new int[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0});
        test("r0 = 0xabc;", new int[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0});
        test("r1 = 0xabc;", new int[]{0,0xabc,0,0,0,0,0,0,0,0,0,0,0,0,4,0});
        test("r1 = 0xabc;r0 = r1;", new int[]{0,0xabc,0,0,0,0,0,0,0,0,0,0,0,0,8,0});
        test("r1 = 0xabc;r2 = r1;", new int[]{0,0xabc,0xabc,0,0,0,0,0,0,0,0,0,0,0,8,0});
        test("r1 = 0xabc;pc=12;r2 = r1;r3=r1;", new int[]{0,0xabc,0,0xabc,0,0,0,0,0,0,0,0,0,0,16,0});
    }

    @Test
    public void testNot(){
        test("r1=7;!r1;", new int[]{0,-8,0,0,0,0,0,0,0,0,0,0,0,0,8,0});
        test("r1=7;sp = !r1;", new int[]{0,7,0,0,0,0,0,0,0,0,0,0,0,0,8,-8});
        test("r0 = !0x0;", new int[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0});
    }

    /**
     * Generated by AI.
     * */
    @Test
    public void testArithmetic(){
        // Original test
        test("r1 = 5; r2 = r1 + 6; r3 = r1 + r2; r3 += r1;",
                new int[]{0,5,11,21,0,0,0,0,0,0,0,0,0,0,16,0});

        // Subtraction with immediate
        test("r1 = 20; r2 = r1 - 5;",
                new int[]{0,20,15,0,0,0,0,0,0,0,0,0,0,0,8,0});

        // Subtraction with register
        test("r1 = 20; r2 = 5; r3 = r1 - r2;",
                new int[]{0,20,5,15,0,0,0,0,0,0,0,0,0,0,12,0});

        // Multiplication
        test("r1 = 4; r2 = 6; r3 = r1 * r2;",
                new int[]{0,4,6,24,0,0,0,0,0,0,0,0,0,0,12,0});

        // Division
        test("r1 = 24; r2 = 6; r3 = r1 / r2;",
                new int[]{0,24,6,4,0,0,0,0,0,0,0,0,0,0,12,0});

        // Division by immediate
        test("r1 = 25; r2 = r1 / 5;",
                new int[]{0,25,5,0,0,0,0,0,0,0,0,0,0,0,8,0});

        // Modulo
        test("r1 = 23; r2 = 5; r3 = r1 % r2;",
                new int[]{0,23,5,3,0,0,0,0,0,0,0,0,0,0,12,0});

        // Mixed operations
        test("r1 = 10; r2 = 2; r3 = r1 + r2; r4 = r3 * 3; r4 -= r2;",
                new int[]{0,10,2,12,34,0,0,0,0,0,0,0,0,0,20,0});

        // Combined immediate and register
        test("r1 = 7; r2 = r1 * 5; r3 = r2 + 3; r3 /= 2;",
                new int[]{0,7,35,19,0,0,0,0,0,0,0,0,0,0,16,0});

        // Negative results (subtraction)
        test("r1 = 5; r2 = 10; r3 = r1 - r2;",
                new int[]{0,5,10,-5,0,0,0,0,0,0,0,0,0,0,12,0});
    }


    @Test
    public void testStack(){

        test("""
                r1 = 123;
                push r1;
                """, new int[]{0,123,0,0,0,0,0,0,0,0,0,0,0,0,8,0xFFFFFFFC}
        );

        test("""
                r1 = 1;
                r2 = 3;
                r3 = 4;
                push r1;
                push r2;
                push r3;
                pop r1;
                pop r2;
                pop r3;
                """, new int[]{0,4,3,1,0,0,0,0,0,0,0,0,0,0,36,0});
    }


    @Test
    public void testMemory(){

        //No offsets

//        test("r1 = 0xFFFF; r2 = 123; [r1] = r2; r3 = [r1];",
//                a -> a.read(0xFFFF) == 123);
//
//        test("r1 = 0xFFFF; r2 = 123; [r1] = r2; r3 = [r1];",
//                new int[]{0, 0xFFFF, 123, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0});
//
//        test("r1 = 100; r2 = 5; r3 = 99; [r1 + r2] = r3; r11 = 150; r10 -= 45; r4 = [r11 + r10];",
//                new int[]{0, 100, 5, 99, 99, 0, 0, 0, 0, 0, -45, 150, 0, 0, 28, 0});

        test("r1 = 100; r2 = 200; r3 -= 999; [r1 + 50] = r3; r4 = [r2 - 50];",
                new int[]{0, 100, 200, -999, -999, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0});


    }

    public static void main(String[] args) {
        System.out.println(Parser.parse("r1 = 100; r2 = 200; r3 -= 999; [r1 + 50] = r3; r4 = [r2 - 50];").get(4).getBinary());
    }

    public void test(String assembly, int[] registerFile){
        test(assembly, a -> {
            for (int i = 0; i < Register.values().length; i++) {
                if(registerFile[i] != a.read(Register.values()[i])) return false;
            }
            return true;
        });
    }

    public void test(String assembly, Predicate<ArchitecturalState> assertion){
        ArchitecturalState a = SugarExecutor.load(assembly).execute();
//        System.out.println(a.getRegisterFileString());
        Assert.assertTrue(a.getRegisterFileString(), assertion.test(a));
    }

}
